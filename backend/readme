cd into backend
npm install
open thunderclient to test the api links 
down below is basically everything needed

Main tests:

1. GET http://localhost:5000/api/health : this checks if everything is running

2. GET http://localhost:5000/api/qr/1?sendEmail=true : this sends an email with QR code to employee id, also gives all details including token

3. GET http://localhost:5000/api/attendance/scan?token=TOKEN_FROM_STEP_2  : this sends an email that you have scanned in with times and date 

4. POST http://localhost:5000/api/attendance/manual (with   {
                                                            "userId": 1
                                                            }  ) this manually clocks you in
5. GET http://localhost:5000/api/debug-token/1   : this checks token generation
```

## üîê **AUTHENTICATION TESTS**

### 1. **User Registration**
```
POST http://localhost:5000/api/auth/register
Content-Type: application/json

{
  "name": "Test User",
  "email": "test@example.com",
  "password": "password123"
}
```

### 2. **User Login**
```
POST http://localhost:5000/api/auth/login
Content-Type: application/json

{
  "email": "test@example.com",
  "password": "password123"
}
```

### 3. **Get User Profile** (Protected Route)
```
GET http://localhost:5000/api/auth/profile
Authorization: Bearer YOUR_JWT_TOKEN
```

### 4. **Get All Users** (Protected Route)
```
GET http://localhost:5000/api/auth/users
Authorization: Bearer YOUR_JWT_TOKEN
```

## üì± **QR CODE & ATTENDANCE TESTS**

### 5. **Generate QR Code** (Basic)
```
GET http://localhost:5000/api/qr/1
```

### 6. **Generate QR Code + Send Email**
```
GET http://localhost:5000/api/qr/1?sendEmail=true
```

### 7. **Send QR Code Email Only**
```
POST http://localhost:5000/api/qr/1/send-email
```

### 8. **Scan QR Code** (Record Attendance)
```
GET http://localhost:5000/api/attendance/scan?token=YOUR_TOKEN_HERE
```

### 9. **Manual Attendance Recording**
```
POST http://localhost:5000/api/attendance/manual
Content-Type: application/json

{
  "userId": 1
}
```

### 10. **Test Same-Day Attendance Prevention**
```
# Call this twice - second call should fail
GET http://localhost:5000/api/attendance/scan?token=YOUR_TOKEN_HERE
```

## üîß **DEBUGGING & VALIDATION TESTS**

### 11. **Health Check**
```
GET http://localhost:5000/api/health
```

### 12. **Decode JWT Token**
```
GET http://localhost:5000/api/attendance/decode-token?token=YOUR_TOKEN_HERE
```

### 13. **Debug Token Generation**
```
GET http://localhost:5000/api/debug-token/1
```

### 14. **Test Database Connection**
```
GET http://localhost:5000/api/health
# Check if database shows as "connected"
```

## üìß **EMAIL FUNCTIONALITY TESTS**

### 15. **Test QR Code Email**
```
GET http://localhost:5000/api/qr/1?sendEmail=true
```

### 16. **Test Attendance Confirmation Email**
```
POST http://localhost:5000/api/attendance/manual
Content-Type: application/json

{
  "userId": 1
}
```

### 17. **Test Direct Email Endpoint**
```
POST http://localhost:5000/api/qr/1/send-email
```

## üö® **ERROR HANDLING TESTS**

### 18. **Test Invalid User ID**
```
GET http://localhost:5000/api/qr/9999
```

### 19. **Test Invalid Token**
```
GET http://localhost:5000/api/attendance/scan?token=invalid_token
```

### 20. **Test Expired Token**
```
# Use a token that's over 1 hour old
GET http://localhost:5000/api/attendance/scan?token=EXPIRED_TOKEN
```

### 21. **Test Missing Token**
```
GET http://localhost:5000/api/attendance/scan
```

### 22. **Test Invalid JSON Body**
```
POST http://localhost:5000/api/attendance/manual
Content-Type: application/json

{
  "userId": "invalid_string"
}
```

## üåê **BROWSER TESTS**

### 23. **Test QR Scan in Browser**
```
# Paste this directly in browser:
http://localhost:5000/api/attendance/scan?token=YOUR_TOKEN_HERE
```

### 24. **Test Error Page in Browser**
```
# Paste invalid token in browser:
http://localhost:5000/api/attendance/scan?token=invalid
```

## üìä **USER MANAGEMENT TESTS**

### 25. **Get All Users** (Alternative Route)
```
GET http://localhost:5000/api/users
Authorization: Bearer YOUR_JWT_TOKEN
```

## üß™ **COMPREHENSIVE TEST SCENARIOS**

### **Scenario 1: Complete User Flow**
1. Register user ‚Üí Login ‚Üí Get profile ‚Üí Generate QR ‚Üí Scan QR ‚Üí Check email

### **Scenario 2: Admin Flow**
1. Login as admin ‚Üí Get all users ‚Üí Generate QR for different users

### **Scenario 3: Error Handling Flow**
1. Try invalid endpoints ‚Üí Test error responses ‚Üí Verify server doesn't crash

### **Scenario 4: Email Integration Flow**
1. Generate QR with email ‚Üí Check inbox ‚Üí Scan QR ‚Üí Check confirmation email

## üéØ **QUICK SMOKE TESTS** (Basic Functionality)



## üìù **TESTING TIPS**

1. **Save tokens** from responses for protected routes
2. **Check server console** for detailed logs
3. **Test both JSON and browser responses**
4. **Verify database updates** after attendance recording
5. **Check email inbox** for sent emails
6. **Test error scenarios** to ensure robustness

## üîÑ **TEST SEQUENCE RECOMMENDATION**

Start with:
1. Health check ‚úÖ
2. Basic QR generation ‚úÖ  
3. Token validation ‚úÖ
4. Attendance recording ‚úÖ
5. Email functionality ‚úÖ
6. Error handling ‚úÖ
7. Authentication ‚úÖ
8. Complete user flow ‚úÖ

Your system is now ready for comprehensive testing! üöÄ